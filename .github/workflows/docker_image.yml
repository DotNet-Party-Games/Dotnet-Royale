name: Docker Image CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:

  build:

    runs-on: ubuntu-latest

    steps:
     - name: Check Out Repo 
       uses: actions/checkout@v2

     - name: Login to Docker Hub
       uses: docker/login-action@v1
       with:
          username: ${{ secrets.DOCKER_USER }}
          password: ${{ secrets.DOCKER_PASSWORD }}

     - name: Set up Docker Buildx
       id: buildx
       uses: docker/setup-buildx-action@v1

     - name: Build and push
       id: docker_build
       uses: docker/build-push-action@v2
       with:
          context: ./API
          file: ./API/Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_USER }}/dotnetroyale:latest

     - name: Image digest
       run: echo ${{ steps.docker_build.outputs.digest }}
     - name: Code Analysis
       # You may pin to the exact commit or the version.
       uses: highbyte/sonarscan-dotnet@v2.1.1-beta
       with:
         # The key of the SonarQube project
         sonarProjectKey: DotNet-Party-Games
         # The name of the SonarQube project
         sonarProjectName: Dotnet-Royale
         sonarOrganization: DotNet-Party-Games
         dotnetBuildArguments: API/
         dotnetTestArguments: API/ --logger trx --collect:"XPlat Code Coverage" --DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=opencover
         # Optional extra command arguments the the SonarScanner 'begin' command
         sonarBeginArguments: /d:sonar.cs.opencover.reportsPaths="**/TestResults/**/coverage.opencover.xml" -d:sonar.cs.vstest.reportsPaths="**/TestResults/*.trx" -/d:sonar.exclusions="**/Migrations/**"
       env:
         SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
#     - uses: actions/checkout@v2
#     - name: docker login
#       env: 
#         DOCKER_USER: ${{secrets.DOCKER_USER}}
#         DOCKER_PASSWORD: ${{secrets.DOCKER_PASSWORD}}
#       run: |
#         docker login -u $DOCKER_USER -p $DOCKER_PASSWORD
      
#     - name: Build the Docker image
#       run: docker build . --file Dockerfile --tag $DOCKER_USER/dotnetroyale:latest
      
#     - name: Docker Push
#       run: docker push ${{secrets.DOCKER_USER}}/battleshipapi
